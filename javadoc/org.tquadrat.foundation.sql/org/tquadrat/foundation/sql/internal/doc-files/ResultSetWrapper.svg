
<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:cc="http://creativecommons.org/ns#"
     xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
     xmlns:svg="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     version='1.1'
     baseProfile='full'
     width='780.000'
     height='5153.000'>
    <defs>
        <style><![CDATA[
            line
            {
              stroke: black;
            }
            line.separator
            {
              stroke:       black;
              stroke-width: 1;
            }
            marker
            {
              fill: white;
            }
            path
            {
              fill:   white;
              stroke: black;
            }
            path.implementation
            {
              fill:             none;
              stroke-dasharray: 5,5;
              stroke-width:     3;
            }
            path.inheritance
            {
              fill:         none;
              stroke-width: 3;
            }
            rect
            {
              fill:         none;
              stroke:       black;
              stroke-width: 2;
            }
            rect.externalClass
            {
              fill:         #D0D0D0;
              fill-opacity: 0.8;
            }
            rect.focusClass
            {
              fill:         #FFFFF9;
              fill-opacity: 0.8;
            }
            rect.otherClass
            {
              fill:         #F0E68C;
              fill-opacity: 0.8;
            }
            rect.template
            {
              fill:             #FFFFFF;
              fill-opacity:     1.0;
              stroke-dasharray: 3,3;
            }
            text
            {
              font-family: monospace;
              font-size:   10px;
              font-weight: bold;
            }
            text.abstract
            {
              font-style: italic;
            }
            text.final
            {
              text-decoration: underline;
            }
            text.static
            {
              font-weight: normal;
            }
            text.stereotype
            {
              font-size:   8px;
              font-weight: normal;
            }
            ]]></style>
        <marker id='inheritance'
                viewBox='0,0,40,40'
                markerUnits='strokeWidth'
                refX='40'
                refY='20'
                markerWidth='6'
                markerHeight='6'
                orient='auto'>
            <path d='M40,20 l-40,-20 v40 Z'
                  fill='#ffffff'
                  stroke='#000000'
                  stroke-width='3'/>
        </marker>
        <marker id='implementation'
                viewBox='0,0,40,40'
                markerUnits='strokeWidth'
                refX='40'
                refY='20'
                markerWidth='6'
                markerHeight='6'
                orient='auto'>
            <path d='M40,20 l-40,-20 v40 Z'
                  fill='#ffffff'
                  stroke='#000000'
                  stroke-width='3'/>
        </marker>
        <clipPath id='ID000001'>
            <rect class='focusClass'
                  height='2207.000'
                  width='712.000'
                  x='0.000'
                  y='0.000'/>
        </clipPath>
        <symbol id='org.tquadrat.foundation.sql.internal.ResultSetWrapper'>
            <g>
                <g class='focusClass'
                   clip-path='url(#ID000001)'>
                    <rect x='0.000'
                          y='0.000'
                          width='712.000'
                          height='2207.000'
                          class='focusClass'/>
                    <line x1='0.000'
                          y1='28.000'
                          x2='712.000'
                          y2='28.000'
                          class='separator'/>
                    <text x='341.600'
                          y='13.000'
                          class='stereotype'>&#xAB;Type&#xBB;</text>
                    <text x='308.000'
                          y='24.000'
                          class='abstract'>ResultSetWrapper</text>
                    <line x1='0.000'
                          y1='45.000'
                          x2='712.000'
                          y2='45.000'
                          class='separator'/>
                    <text y='41.000'
                          class='final'>- m_Instance:java.sql.ResultSet</text>
                    <text x='5.000'
                          y='58.000'># ResultSetWrapper(instance:java.sql.ResultSet)</text>
                    <text x='5.000'
                          y='69.000'>+ absolute(row:int):boolean</text>
                    <text x='5.000'
                          y='80.000'>+ afterLast():void</text>
                    <text x='5.000'
                          y='91.000'>+ beforeFirst():void</text>
                    <text x='5.000'
                          y='102.000'>+ cancelRowUpdates():void</text>
                    <text x='5.000'
                          y='113.000'>+ clearWarnings():void</text>
                    <text x='5.000'
                          y='124.000'>+ close():void</text>
                    <text x='5.000'
                          y='135.000'>+ deleteRow():void</text>
                    <text x='5.000'
                          y='146.000'>+ findColumn(columnLabel:java.lang.String):int</text>
                    <text x='5.000'
                          y='157.000'>+ first():boolean</text>
                    <text x='5.000'
                          y='168.000'>+ getArray(columnIndex:int):java.sql.Array</text>
                    <text x='5.000'
                          y='179.000'>+ getArray(columnLabel:java.lang.String):java.sql.Array</text>
                    <text x='5.000'
                          y='190.000'>+ getAsciiStream(columnIndex:int):java.io.InputStream</text>
                    <text x='5.000'
                          y='201.000'>+ getAsciiStream(columnLabel:java.lang.String):java.io.InputStream</text>
                    <text x='5.000'
                          y='212.000'>+ getBigDecimal(columnIndex:int):java.math.BigDecimal</text>
                    <text x='5.000'
                          y='223.000'>+ getBigDecimal(columnIndex:int,scale:int):java.math.BigDecimal</text>
                    <text x='5.000'
                          y='234.000'>+ getBigDecimal(columnLabel:java.lang.String):java.math.BigDecimal</text>
                    <text x='5.000'
                          y='245.000'>+ getBigDecimal(columnLabel:java.lang.String,scale:int):java.math.BigDecimal</text>
                    <text x='5.000'
                          y='256.000'>+ getBinaryStream(columnIndex:int):java.io.InputStream</text>
                    <text x='5.000'
                          y='267.000'>+ getBinaryStream(columnLabel:java.lang.String):java.io.InputStream</text>
                    <text x='5.000'
                          y='278.000'>+ getBlob(columnIndex:int):java.sql.Blob</text>
                    <text x='5.000'
                          y='289.000'>+ getBlob(columnLabel:java.lang.String):java.sql.Blob</text>
                    <text x='5.000'
                          y='300.000'>+ getBoolean(columnIndex:int):boolean</text>
                    <text x='5.000'
                          y='311.000'>+ getBoolean(columnLabel:java.lang.String):boolean</text>
                    <text x='5.000'
                          y='322.000'>+ getByte(columnIndex:int):byte</text>
                    <text x='5.000'
                          y='333.000'>+ getByte(columnLabel:java.lang.String):byte</text>
                    <text x='5.000'
                          y='344.000'>+ getBytes(columnIndex:int):byte[]</text>
                    <text x='5.000'
                          y='355.000'>+ getBytes(columnLabel:java.lang.String):byte[]</text>
                    <text x='5.000'
                          y='366.000'>+ getCharacterStream(columnIndex:int):java.io.Reader</text>
                    <text x='5.000'
                          y='377.000'>+ getCharacterStream(columnLabel:java.lang.String):java.io.Reader</text>
                    <text x='5.000'
                          y='388.000'>+ getClob(columnIndex:int):java.sql.Clob</text>
                    <text x='5.000'
                          y='399.000'>+ getClob(columnLabel:java.lang.String):java.sql.Clob</text>
                    <text x='5.000'
                          y='410.000'>+ getConcurrency():int</text>
                    <text x='5.000'
                          y='421.000'>+ getCursorName():java.lang.String</text>
                    <text x='5.000'
                          y='432.000'>+ getDate(columnIndex:int):java.sql.Date</text>
                    <text x='5.000'
                          y='443.000'>+ getDate(columnIndex:int,cal:java.util.Calendar):java.sql.Date</text>
                    <text x='5.000'
                          y='454.000'>+ getDate(columnLabel:java.lang.String):java.sql.Date</text>
                    <text x='5.000'
                          y='465.000'>+ getDate(columnLabel:java.lang.String,cal:java.util.Calendar):java.sql.Date</text>
                    <text x='5.000'
                          y='476.000'>+ getDouble(columnIndex:int):double</text>
                    <text x='5.000'
                          y='487.000'>+ getDouble(columnLabel:java.lang.String):double</text>
                    <text x='5.000'
                          y='498.000'>+ getFetchDirection():int</text>
                    <text x='5.000'
                          y='509.000'>+ getFetchSize():int</text>
                    <text x='5.000'
                          y='520.000'>+ getFloat(columnIndex:int):float</text>
                    <text x='5.000'
                          y='531.000'>+ getFloat(columnLabel:java.lang.String):float</text>
                    <text x='5.000'
                          y='542.000'>+ getHoldability():int</text>
                    <text x='5.000'
                          y='553.000'>+ getInt(columnIndex:int):int</text>
                    <text x='5.000'
                          y='564.000'>+ getInt(columnLabel:java.lang.String):int</text>
                    <text x='5.000'
                          y='575.000'>+ getLong(columnIndex:int):long</text>
                    <text x='5.000'
                          y='586.000'>+ getLong(columnLabel:java.lang.String):long</text>
                    <text x='5.000'
                          y='597.000'>+ getMetaData():java.sql.ResultSetMetaData</text>
                    <text x='5.000'
                          y='608.000'>+ getNCharacterStream(columnIndex:int):java.io.Reader</text>
                    <text x='5.000'
                          y='619.000'>+ getNCharacterStream(columnLabel:java.lang.String):java.io.Reader</text>
                    <text x='5.000'
                          y='630.000'>+ getNClob(columnIndex:int):java.sql.NClob</text>
                    <text x='5.000'
                          y='641.000'>+ getNClob(columnLabel:java.lang.String):java.sql.NClob</text>
                    <text x='5.000'
                          y='652.000'>+ getNString(columnIndex:int):java.lang.String</text>
                    <text x='5.000'
                          y='663.000'>+ getNString(columnLabel:java.lang.String):java.lang.String</text>
                    <text x='5.000'
                          y='674.000'>+ getObject(columnIndex:int):java.lang.Object</text>
                    <text x='5.000'
                          y='685.000'>+ getObject(columnIndex:int,type:java.lang.Class&lt;T&gt;):T</text>
                    <text x='5.000'
                          y='696.000'>+ getObject(columnIndex:int,map:java.util.Map&lt;java.lang.String,java.lang.Class&lt;?&gt;&gt;):java.lang.Object</text>
                    <text x='5.000'
                          y='707.000'>+ getObject(columnLabel:java.lang.String):java.lang.Object</text>
                    <text x='5.000'
                          y='718.000'>+ getObject(columnLabel:java.lang.String,type:java.lang.Class&lt;T&gt;):T</text>
                    <text x='5.000'
                          y='729.000'>+ getObject(columnLabel:java.lang.String,map:java.util.Map&lt;java.lang.String,java.lang.Class&lt;?&gt;&gt;):java.lang.Object</text>
                    <text x='5.000'
                          y='740.000'>+ getRef(columnIndex:int):java.sql.Ref</text>
                    <text x='5.000'
                          y='751.000'>+ getRef(columnLabel:java.lang.String):java.sql.Ref</text>
                    <text x='5.000'
                          y='762.000'>+ getRow():int</text>
                    <text x='5.000'
                          y='773.000'>+ getRowId(columnIndex:int):java.sql.RowId</text>
                    <text x='5.000'
                          y='784.000'>+ getRowId(columnLabel:java.lang.String):java.sql.RowId</text>
                    <text x='5.000'
                          y='795.000'>+ getShort(columnIndex:int):short</text>
                    <text x='5.000'
                          y='806.000'>+ getShort(columnLabel:java.lang.String):short</text>
                    <text x='5.000'
                          y='817.000'>+ getSQLXML(columnIndex:int):java.sql.SQLXML</text>
                    <text x='5.000'
                          y='828.000'>+ getSQLXML(columnLabel:java.lang.String):java.sql.SQLXML</text>
                    <text x='5.000'
                          y='839.000'>+ getStatement():java.sql.Statement</text>
                    <text x='5.000'
                          y='850.000'>+ getString(columnIndex:int):java.lang.String</text>
                    <text x='5.000'
                          y='861.000'>+ getString(columnLabel:java.lang.String):java.lang.String</text>
                    <text x='5.000'
                          y='872.000'>+ getTime(columnIndex:int):java.sql.Time</text>
                    <text x='5.000'
                          y='883.000'>+ getTime(columnIndex:int,cal:java.util.Calendar):java.sql.Time</text>
                    <text x='5.000'
                          y='894.000'>+ getTime(columnLabel:java.lang.String):java.sql.Time</text>
                    <text x='5.000'
                          y='905.000'>+ getTime(columnLabel:java.lang.String,cal:java.util.Calendar):java.sql.Time</text>
                    <text x='5.000'
                          y='916.000'>+ getTimestamp(columnIndex:int):java.sql.Timestamp</text>
                    <text x='5.000'
                          y='927.000'>+ getTimestamp(columnIndex:int,cal:java.util.Calendar):java.sql.Timestamp</text>
                    <text x='5.000'
                          y='938.000'>+ getTimestamp(columnLabel:java.lang.String):java.sql.Timestamp</text>
                    <text x='5.000'
                          y='949.000'>+ getTimestamp(columnLabel:java.lang.String,cal:java.util.Calendar):java.sql.Timestamp</text>
                    <text x='5.000'
                          y='960.000'>+ getType():int</text>
                    <text x='5.000'
                          y='971.000'>+ getUnicodeStream(columnIndex:int):java.io.InputStream</text>
                    <text x='5.000'
                          y='982.000'>+ getUnicodeStream(columnLabel:java.lang.String):java.io.InputStream</text>
                    <text x='5.000'
                          y='993.000'>+ getURL(columnIndex:int):java.net.URL</text>
                    <text x='5.000'
                          y='1004.000'>+ getURL(columnLabel:java.lang.String):java.net.URL</text>
                    <text x='5.000'
                          y='1015.000'>+ getWarnings():java.sql.SQLWarning</text>
                    <text x='5.000'
                          y='1026.000'>+ insertRow():void</text>
                    <text x='5.000'
                          y='1037.000'>+ isAfterLast():boolean</text>
                    <text x='5.000'
                          y='1048.000'>+ isBeforeFirst():boolean</text>
                    <text x='5.000'
                          y='1059.000'>+ isClosed():boolean</text>
                    <text x='5.000'
                          y='1070.000'>+ isFirst():boolean</text>
                    <text x='5.000'
                          y='1081.000'>+ isLast():boolean</text>
                    <text x='5.000'
                          y='1092.000'>+ isWrapperFor(iface:java.lang.Class&lt;?&gt;):boolean</text>
                    <text x='5.000'
                          y='1103.000'>+ last():boolean</text>
                    <text x='5.000'
                          y='1114.000'>+ moveToCurrentRow():void</text>
                    <text x='5.000'
                          y='1125.000'>+ moveToInsertRow():void</text>
                    <text x='5.000'
                          y='1136.000'>+ next():boolean</text>
                    <text x='5.000'
                          y='1147.000'>+ previous():boolean</text>
                    <text x='5.000'
                          y='1158.000'>+ refreshRow():void</text>
                    <text x='5.000'
                          y='1169.000'>+ relative(rows:int):boolean</text>
                    <text x='5.000'
                          y='1180.000'>+ rowDeleted():boolean</text>
                    <text x='5.000'
                          y='1191.000'>+ rowInserted():boolean</text>
                    <text x='5.000'
                          y='1202.000'>+ rowUpdated():boolean</text>
                    <text x='5.000'
                          y='1213.000'>+ setFetchDirection(direction:int):void</text>
                    <text x='5.000'
                          y='1224.000'>+ setFetchSize(rows:int):void</text>
                    <text x='5.000'
                          y='1235.000'>+ unwrap(iface:java.lang.Class&lt;T&gt;):T</text>
                    <text x='5.000'
                          y='1246.000'>+ updateArray(columnIndex:int,x:java.sql.Array):void</text>
                    <text x='5.000'
                          y='1257.000'>+ updateArray(columnLabel:java.lang.String,x:java.sql.Array):void</text>
                    <text x='5.000'
                          y='1268.000'>+ updateAsciiStream(columnIndex:int,x:java.io.InputStream):void</text>
                    <text x='5.000'
                          y='1279.000'>+ updateAsciiStream(columnIndex:int,x:java.io.InputStream,length:int):void</text>
                    <text x='5.000'
                          y='1290.000'>+ updateAsciiStream(columnIndex:int,x:java.io.InputStream,length:long):void</text>
                    <text x='5.000'
                          y='1301.000'>+ updateAsciiStream(columnLabel:java.lang.String,x:java.io.InputStream):void</text>
                    <text x='5.000'
                          y='1312.000'>+ updateAsciiStream(columnLabel:java.lang.String,x:java.io.InputStream,length:int):void</text>
                    <text x='5.000'
                          y='1323.000'>+ updateAsciiStream(columnLabel:java.lang.String,x:java.io.InputStream,length:long):void</text>
                    <text x='5.000'
                          y='1334.000'>+ updateBigDecimal(columnIndex:int,x:java.math.BigDecimal):void</text>
                    <text x='5.000'
                          y='1345.000'>+ updateBigDecimal(columnLabel:java.lang.String,x:java.math.BigDecimal):void</text>
                    <text x='5.000'
                          y='1356.000'>+ updateBinaryStream(columnIndex:int,x:java.io.InputStream):void</text>
                    <text x='5.000'
                          y='1367.000'>+ updateBinaryStream(columnIndex:int,x:java.io.InputStream,length:int):void</text>
                    <text x='5.000'
                          y='1378.000'>+ updateBinaryStream(columnIndex:int,x:java.io.InputStream,length:long):void</text>
                    <text x='5.000'
                          y='1389.000'>+ updateBinaryStream(columnLabel:java.lang.String,x:java.io.InputStream):void</text>
                    <text x='5.000'
                          y='1400.000'>+ updateBinaryStream(columnLabel:java.lang.String,x:java.io.InputStream,length:int):void</text>
                    <text x='5.000'
                          y='1411.000'>+ updateBinaryStream(columnLabel:java.lang.String,x:java.io.InputStream,length:long):void</text>
                    <text x='5.000'
                          y='1422.000'>+ updateBlob(columnIndex:int,x:java.sql.Blob):void</text>
                    <text x='5.000'
                          y='1433.000'>+ updateBlob(columnIndex:int,inputStream:java.io.InputStream):void</text>
                    <text x='5.000'
                          y='1444.000'>+ updateBlob(columnIndex:int,inputStream:java.io.InputStream,length:long):void</text>
                    <text x='5.000'
                          y='1455.000'>+ updateBlob(columnLabel:java.lang.String,x:java.sql.Blob):void</text>
                    <text x='5.000'
                          y='1466.000'>+ updateBlob(columnLabel:java.lang.String,inputStream:java.io.InputStream):void</text>
                    <text x='5.000'
                          y='1477.000'>+ updateBlob(columnLabel:java.lang.String,inputStream:java.io.InputStream,length:long):void</text>
                    <text x='5.000'
                          y='1488.000'>+ updateBoolean(columnIndex:int,x:boolean):void</text>
                    <text x='5.000'
                          y='1499.000'>+ updateBoolean(columnLabel:java.lang.String,x:boolean):void</text>
                    <text x='5.000'
                          y='1510.000'>+ updateByte(columnIndex:int,x:byte):void</text>
                    <text x='5.000'
                          y='1521.000'>+ updateByte(columnLabel:java.lang.String,x:byte):void</text>
                    <text x='5.000'
                          y='1532.000'>+ updateBytes(columnIndex:int,x:byte[]):void</text>
                    <text x='5.000'
                          y='1543.000'>+ updateBytes(columnLabel:java.lang.String,x:byte[]):void</text>
                    <text x='5.000'
                          y='1554.000'>+ updateCharacterStream(columnIndex:int,x:java.io.Reader):void</text>
                    <text x='5.000'
                          y='1565.000'>+ updateCharacterStream(columnIndex:int,x:java.io.Reader,length:int):void</text>
                    <text x='5.000'
                          y='1576.000'>+ updateCharacterStream(columnIndex:int,x:java.io.Reader,length:long):void</text>
                    <text x='5.000'
                          y='1587.000'>+ updateCharacterStream(columnLabel:java.lang.String,reader:java.io.Reader):void</text>
                    <text x='5.000'
                          y='1598.000'>+ updateCharacterStream(columnLabel:java.lang.String,reader:java.io.Reader,length:int):void</text>
                    <text x='5.000'
                          y='1609.000'>+ updateCharacterStream(columnLabel:java.lang.String,reader:java.io.Reader,length:long):void</text>
                    <text x='5.000'
                          y='1620.000'>+ updateClob(columnIndex:int,x:java.sql.Clob):void</text>
                    <text x='5.000'
                          y='1631.000'>+ updateClob(columnIndex:int,reader:java.io.Reader):void</text>
                    <text x='5.000'
                          y='1642.000'>+ updateClob(columnIndex:int,reader:java.io.Reader,length:long):void</text>
                    <text x='5.000'
                          y='1653.000'>+ updateClob(columnLabel:java.lang.String,x:java.sql.Clob):void</text>
                    <text x='5.000'
                          y='1664.000'>+ updateClob(columnLabel:java.lang.String,reader:java.io.Reader):void</text>
                    <text x='5.000'
                          y='1675.000'>+ updateClob(columnLabel:java.lang.String,reader:java.io.Reader,length:long):void</text>
                    <text x='5.000'
                          y='1686.000'>+ updateDate(columnIndex:int,x:java.sql.Date):void</text>
                    <text x='5.000'
                          y='1697.000'>+ updateDate(columnLabel:java.lang.String,x:java.sql.Date):void</text>
                    <text x='5.000'
                          y='1708.000'>+ updateDouble(columnIndex:int,x:double):void</text>
                    <text x='5.000'
                          y='1719.000'>+ updateDouble(columnLabel:java.lang.String,x:double):void</text>
                    <text x='5.000'
                          y='1730.000'>+ updateFloat(columnIndex:int,x:float):void</text>
                    <text x='5.000'
                          y='1741.000'>+ updateFloat(columnLabel:java.lang.String,x:float):void</text>
                    <text x='5.000'
                          y='1752.000'>+ updateInt(columnIndex:int,x:int):void</text>
                    <text x='5.000'
                          y='1763.000'>+ updateInt(columnLabel:java.lang.String,x:int):void</text>
                    <text x='5.000'
                          y='1774.000'>+ updateLong(columnIndex:int,x:long):void</text>
                    <text x='5.000'
                          y='1785.000'>+ updateLong(columnLabel:java.lang.String,x:long):void</text>
                    <text x='5.000'
                          y='1796.000'>+ updateNCharacterStream(columnIndex:int,x:java.io.Reader):void</text>
                    <text x='5.000'
                          y='1807.000'>+ updateNCharacterStream(columnIndex:int,x:java.io.Reader,length:long):void</text>
                    <text x='5.000'
                          y='1818.000'>+ updateNCharacterStream(columnLabel:java.lang.String,reader:java.io.Reader):void</text>
                    <text x='5.000'
                          y='1829.000'>+ updateNCharacterStream(columnLabel:java.lang.String,reader:java.io.Reader,length:long):void</text>
                    <text x='5.000'
                          y='1840.000'>+ updateNClob(columnIndex:int,nClob:java.sql.NClob):void</text>
                    <text x='5.000'
                          y='1851.000'>+ updateNClob(columnIndex:int,reader:java.io.Reader):void</text>
                    <text x='5.000'
                          y='1862.000'>+ updateNClob(columnIndex:int,reader:java.io.Reader,length:long):void</text>
                    <text x='5.000'
                          y='1873.000'>+ updateNClob(columnLabel:java.lang.String,nClob:java.sql.NClob):void</text>
                    <text x='5.000'
                          y='1884.000'>+ updateNClob(columnLabel:java.lang.String,reader:java.io.Reader):void</text>
                    <text x='5.000'
                          y='1895.000'>+ updateNClob(columnLabel:java.lang.String,reader:java.io.Reader,length:long):void</text>
                    <text x='5.000'
                          y='1906.000'>+ updateNString(columnIndex:int,nString:java.lang.String):void</text>
                    <text x='5.000'
                          y='1917.000'>+ updateNString(columnLabel:java.lang.String,nString:java.lang.String):void</text>
                    <text x='5.000'
                          y='1928.000'>+ updateNull(columnIndex:int):void</text>
                    <text x='5.000'
                          y='1939.000'>+ updateNull(columnLabel:java.lang.String):void</text>
                    <text x='5.000'
                          y='1950.000'>+ updateObject(columnIndex:int,x:java.lang.Object):void</text>
                    <text x='5.000'
                          y='1961.000'>+ updateObject(columnIndex:int,x:java.lang.Object,scaleOrLength:int):void</text>
                    <text x='5.000'
                          y='1972.000'>+ updateObject(columnIndex:int,x:java.lang.Object,targetSqlType:java.sql.SQLType):void</text>
                    <text x='5.000'
                          y='1983.000'>+ updateObject(columnIndex:int,x:java.lang.Object,targetSqlType:java.sql.SQLType,scaleOrLength:int):void</text>
                    <text x='5.000'
                          y='1994.000'>+ updateObject(columnLabel:java.lang.String,x:java.lang.Object):void</text>
                    <text x='5.000'
                          y='2005.000'>+ updateObject(columnLabel:java.lang.String,x:java.lang.Object,scaleOrLength:int):void</text>
                    <text x='5.000'
                          y='2016.000'>+ updateObject(columnLabel:java.lang.String,x:java.lang.Object,targetSqlType:java.sql.SQLType):void</text>
                    <text x='5.000'
                          y='2027.000'>+ updateObject(columnLabel:java.lang.String,x:java.lang.Object,targetSqlType:java.sql.SQLType,scaleOrLength:int):void</text>
                    <text x='5.000'
                          y='2038.000'>+ updateRef(columnIndex:int,x:java.sql.Ref):void</text>
                    <text x='5.000'
                          y='2049.000'>+ updateRef(columnLabel:java.lang.String,x:java.sql.Ref):void</text>
                    <text x='5.000'
                          y='2060.000'>+ updateRow():void</text>
                    <text x='5.000'
                          y='2071.000'>+ updateRowId(columnIndex:int,x:java.sql.RowId):void</text>
                    <text x='5.000'
                          y='2082.000'>+ updateRowId(columnLabel:java.lang.String,x:java.sql.RowId):void</text>
                    <text x='5.000'
                          y='2093.000'>+ updateShort(columnIndex:int,x:short):void</text>
                    <text x='5.000'
                          y='2104.000'>+ updateShort(columnLabel:java.lang.String,x:short):void</text>
                    <text x='5.000'
                          y='2115.000'>+ updateSQLXML(columnIndex:int,xmlObject:java.sql.SQLXML):void</text>
                    <text x='5.000'
                          y='2126.000'>+ updateSQLXML(columnLabel:java.lang.String,xmlObject:java.sql.SQLXML):void</text>
                    <text x='5.000'
                          y='2137.000'>+ updateString(columnIndex:int,x:java.lang.String):void</text>
                    <text x='5.000'
                          y='2148.000'>+ updateString(columnLabel:java.lang.String,x:java.lang.String):void</text>
                    <text x='5.000'
                          y='2159.000'>+ updateTime(columnIndex:int,x:java.sql.Time):void</text>
                    <text x='5.000'
                          y='2170.000'>+ updateTime(columnLabel:java.lang.String,x:java.sql.Time):void</text>
                    <text x='5.000'
                          y='2181.000'>+ updateTimestamp(columnIndex:int,x:java.sql.Timestamp):void</text>
                    <text x='5.000'
                          y='2192.000'>+ updateTimestamp(columnLabel:java.lang.String,x:java.sql.Timestamp):void</text>
                    <text x='5.000'
                          y='2203.000'>+ wasNull():boolean</text>
                </g>
            </g>
        </symbol>
        <clipPath id='ID000002'>
            <rect class='otherClass'
                  height='51.000'
                  width='136.000'
                  x='0.000'
                  y='0.000'/>
        </clipPath>
        <symbol id='org.tquadrat.foundation.sql.internal.ResultSetSpliterator.InternalResultSet'>
            <g>
                <g clip-path='url(#ID000002)'>
                    <rect x='0.000'
                          y='0.000'
                          width='136.000'
                          height='51.000'
                          class='otherClass'/>
                    <line x1='0.000'
                          y1='17.000'
                          x2='136.000'
                          y2='17.000'
                          class='separator'/>
                    <text x='17.000'
                          y='13.000'>InternalResultSet</text>
                    <line x1='0.000'
                          y1='34.000'
                          x2='136.000'
                          y2='34.000'
                          class='separator'/>
                    <text x='5.000'
                          y='30.000'/>
                    <text x='5.000'
                          y='47.000'>+ InternalResultSet()</text>
                </g>
            </g>
        </symbol>
        <clipPath id='ID000003'>
            <rect class='externalClass'
                  height='172.000'
                  width='244.000'
                  x='0.000'
                  y='0.000'/>
        </clipPath>
        <symbol id='java.lang.Object'>
            <g>
                <g clip-path='url(#ID000003)'>
                    <rect x='0.000'
                          y='0.000'
                          width='244.000'
                          height='172.000'
                          class='externalClass'/>
                    <line x1='0.000'
                          y1='17.000'
                          x2='244.000'
                          y2='17.000'
                          class='separator'/>
                    <text x='104.000'
                          y='13.000'>Object</text>
                    <line x1='0.000'
                          y1='34.000'
                          x2='244.000'
                          y2='34.000'
                          class='separator'/>
                    <text x='5.000'
                          y='30.000'/>
                    <text x='5.000'
                          y='47.000'>+ Object()</text>
                    <text x='5.000'
                          y='58.000'>+ getClass():java.lang.Class&lt;?&gt;</text>
                    <text x='5.000'
                          y='69.000'>+ hashCode():int</text>
                    <text x='5.000'
                          y='80.000'>+ equals(arg0:java.lang.Object):boolean</text>
                    <text x='5.000'
                          y='91.000'># clone():java.lang.Object</text>
                    <text x='5.000'
                          y='102.000'>+ toString():java.lang.String</text>
                    <text x='5.000'
                          y='113.000'>+ notify():void</text>
                    <text x='5.000'
                          y='124.000'>+ notifyAll():void</text>
                    <text x='5.000'
                          y='135.000'>+ wait():void</text>
                    <text x='5.000'
                          y='146.000'>+ wait(arg0:long):void</text>
                    <text x='5.000'
                          y='157.000'>+ wait(arg0:long,arg1:int):void</text>
                    <text x='5.000'
                          y='168.000'># finalize():void</text>
                </g>
            </g>
        </symbol>
        <clipPath id='ID000004'>
            <rect class='externalClass'
                  height='2273.000'
                  width='652.000'
                  x='0.000'
                  y='0.000'/>
        </clipPath>
        <symbol id='java.sql.ResultSet'>
            <g>
                <g clip-path='url(#ID000004)'>
                    <rect x='0.000'
                          y='0.000'
                          width='652.000'
                          height='2273.000'
                          class='externalClass'/>
                    <line x1='0.000'
                          y1='28.000'
                          x2='652.000'
                          y2='28.000'
                          class='separator'/>
                    <text x='299.600'
                          y='13.000'
                          class='stereotype'>&#xAB;Interface&#xBB;</text>
                    <text x='299.000'
                          y='24.000'
                          class='abstract'>ResultSet</text>
                    <line x1='0.000'
                          y1='144.000'
                          x2='652.000'
                          y2='144.000'
                          class='separator'/>
                    <text y='41.000'
                          class='static final'>+ FETCH_FORWARD:int</text>
                    <text y='52.000'
                          class='static final'>+ FETCH_REVERSE:int</text>
                    <text y='63.000'
                          class='static final'>+ FETCH_UNKNOWN:int</text>
                    <text y='74.000'
                          class='static final'>+ TYPE_FORWARD_ONLY:int</text>
                    <text y='85.000'
                          class='static final'>+ TYPE_SCROLL_INSENSITIVE:int</text>
                    <text y='96.000'
                          class='static final'>+ TYPE_SCROLL_SENSITIVE:int</text>
                    <text y='107.000'
                          class='static final'>+ CONCUR_READ_ONLY:int</text>
                    <text y='118.000'
                          class='static final'>+ CONCUR_UPDATABLE:int</text>
                    <text y='129.000'
                          class='static final'>+ HOLD_CURSORS_OVER_COMMIT:int</text>
                    <text y='140.000'
                          class='static final'>+ CLOSE_CURSORS_AT_COMMIT:int</text>
                    <text x='5.000'
                          y='157.000'
                          class='abstract'>+ next():boolean</text>
                    <text x='5.000'
                          y='168.000'
                          class='abstract'>+ close():void</text>
                    <text x='5.000'
                          y='179.000'
                          class='abstract'>+ wasNull():boolean</text>
                    <text x='5.000'
                          y='190.000'
                          class='abstract'>+ getString(arg0:int):java.lang.String</text>
                    <text x='5.000'
                          y='201.000'
                          class='abstract'>+ getBoolean(arg0:int):boolean</text>
                    <text x='5.000'
                          y='212.000'
                          class='abstract'>+ getByte(arg0:int):byte</text>
                    <text x='5.000'
                          y='223.000'
                          class='abstract'>+ getShort(arg0:int):short</text>
                    <text x='5.000'
                          y='234.000'
                          class='abstract'>+ getInt(arg0:int):int</text>
                    <text x='5.000'
                          y='245.000'
                          class='abstract'>+ getLong(arg0:int):long</text>
                    <text x='5.000'
                          y='256.000'
                          class='abstract'>+ getFloat(arg0:int):float</text>
                    <text x='5.000'
                          y='267.000'
                          class='abstract'>+ getDouble(arg0:int):double</text>
                    <text x='5.000'
                          y='278.000'
                          class='abstract'>+ getBigDecimal(arg0:int,arg1:int):java.math.BigDecimal</text>
                    <text x='5.000'
                          y='289.000'
                          class='abstract'>+ getBytes(arg0:int):byte[]</text>
                    <text x='5.000'
                          y='300.000'
                          class='abstract'>+ getDate(arg0:int):java.sql.Date</text>
                    <text x='5.000'
                          y='311.000'
                          class='abstract'>+ getTime(arg0:int):java.sql.Time</text>
                    <text x='5.000'
                          y='322.000'
                          class='abstract'>+ getTimestamp(arg0:int):java.sql.Timestamp</text>
                    <text x='5.000'
                          y='333.000'
                          class='abstract'>+ getAsciiStream(arg0:int):java.io.InputStream</text>
                    <text x='5.000'
                          y='344.000'
                          class='abstract'>+ getUnicodeStream(arg0:int):java.io.InputStream</text>
                    <text x='5.000'
                          y='355.000'
                          class='abstract'>+ getBinaryStream(arg0:int):java.io.InputStream</text>
                    <text x='5.000'
                          y='366.000'
                          class='abstract'>+ getString(arg0:java.lang.String):java.lang.String</text>
                    <text x='5.000'
                          y='377.000'
                          class='abstract'>+ getBoolean(arg0:java.lang.String):boolean</text>
                    <text x='5.000'
                          y='388.000'
                          class='abstract'>+ getByte(arg0:java.lang.String):byte</text>
                    <text x='5.000'
                          y='399.000'
                          class='abstract'>+ getShort(arg0:java.lang.String):short</text>
                    <text x='5.000'
                          y='410.000'
                          class='abstract'>+ getInt(arg0:java.lang.String):int</text>
                    <text x='5.000'
                          y='421.000'
                          class='abstract'>+ getLong(arg0:java.lang.String):long</text>
                    <text x='5.000'
                          y='432.000'
                          class='abstract'>+ getFloat(arg0:java.lang.String):float</text>
                    <text x='5.000'
                          y='443.000'
                          class='abstract'>+ getDouble(arg0:java.lang.String):double</text>
                    <text x='5.000'
                          y='454.000'
                          class='abstract'>+ getBigDecimal(arg0:java.lang.String,arg1:int):java.math.BigDecimal</text>
                    <text x='5.000'
                          y='465.000'
                          class='abstract'>+ getBytes(arg0:java.lang.String):byte[]</text>
                    <text x='5.000'
                          y='476.000'
                          class='abstract'>+ getDate(arg0:java.lang.String):java.sql.Date</text>
                    <text x='5.000'
                          y='487.000'
                          class='abstract'>+ getTime(arg0:java.lang.String):java.sql.Time</text>
                    <text x='5.000'
                          y='498.000'
                          class='abstract'>+ getTimestamp(arg0:java.lang.String):java.sql.Timestamp</text>
                    <text x='5.000'
                          y='509.000'
                          class='abstract'>+ getAsciiStream(arg0:java.lang.String):java.io.InputStream</text>
                    <text x='5.000'
                          y='520.000'
                          class='abstract'>+ getUnicodeStream(arg0:java.lang.String):java.io.InputStream</text>
                    <text x='5.000'
                          y='531.000'
                          class='abstract'>+ getBinaryStream(arg0:java.lang.String):java.io.InputStream</text>
                    <text x='5.000'
                          y='542.000'
                          class='abstract'>+ getWarnings():java.sql.SQLWarning</text>
                    <text x='5.000'
                          y='553.000'
                          class='abstract'>+ clearWarnings():void</text>
                    <text x='5.000'
                          y='564.000'
                          class='abstract'>+ getCursorName():java.lang.String</text>
                    <text x='5.000'
                          y='575.000'
                          class='abstract'>+ getMetaData():java.sql.ResultSetMetaData</text>
                    <text x='5.000'
                          y='586.000'
                          class='abstract'>+ getObject(arg0:int):java.lang.Object</text>
                    <text x='5.000'
                          y='597.000'
                          class='abstract'>+ getObject(arg0:java.lang.String):java.lang.Object</text>
                    <text x='5.000'
                          y='608.000'
                          class='abstract'>+ findColumn(arg0:java.lang.String):int</text>
                    <text x='5.000'
                          y='619.000'
                          class='abstract'>+ getCharacterStream(arg0:int):java.io.Reader</text>
                    <text x='5.000'
                          y='630.000'
                          class='abstract'>+ getCharacterStream(arg0:java.lang.String):java.io.Reader</text>
                    <text x='5.000'
                          y='641.000'
                          class='abstract'>+ getBigDecimal(arg0:int):java.math.BigDecimal</text>
                    <text x='5.000'
                          y='652.000'
                          class='abstract'>+ getBigDecimal(arg0:java.lang.String):java.math.BigDecimal</text>
                    <text x='5.000'
                          y='663.000'
                          class='abstract'>+ isBeforeFirst():boolean</text>
                    <text x='5.000'
                          y='674.000'
                          class='abstract'>+ isAfterLast():boolean</text>
                    <text x='5.000'
                          y='685.000'
                          class='abstract'>+ isFirst():boolean</text>
                    <text x='5.000'
                          y='696.000'
                          class='abstract'>+ isLast():boolean</text>
                    <text x='5.000'
                          y='707.000'
                          class='abstract'>+ beforeFirst():void</text>
                    <text x='5.000'
                          y='718.000'
                          class='abstract'>+ afterLast():void</text>
                    <text x='5.000'
                          y='729.000'
                          class='abstract'>+ first():boolean</text>
                    <text x='5.000'
                          y='740.000'
                          class='abstract'>+ last():boolean</text>
                    <text x='5.000'
                          y='751.000'
                          class='abstract'>+ getRow():int</text>
                    <text x='5.000'
                          y='762.000'
                          class='abstract'>+ absolute(arg0:int):boolean</text>
                    <text x='5.000'
                          y='773.000'
                          class='abstract'>+ relative(arg0:int):boolean</text>
                    <text x='5.000'
                          y='784.000'
                          class='abstract'>+ previous():boolean</text>
                    <text x='5.000'
                          y='795.000'
                          class='abstract'>+ setFetchDirection(arg0:int):void</text>
                    <text x='5.000'
                          y='806.000'
                          class='abstract'>+ getFetchDirection():int</text>
                    <text x='5.000'
                          y='817.000'
                          class='abstract'>+ setFetchSize(arg0:int):void</text>
                    <text x='5.000'
                          y='828.000'
                          class='abstract'>+ getFetchSize():int</text>
                    <text x='5.000'
                          y='839.000'
                          class='abstract'>+ getType():int</text>
                    <text x='5.000'
                          y='850.000'
                          class='abstract'>+ getConcurrency():int</text>
                    <text x='5.000'
                          y='861.000'
                          class='abstract'>+ rowUpdated():boolean</text>
                    <text x='5.000'
                          y='872.000'
                          class='abstract'>+ rowInserted():boolean</text>
                    <text x='5.000'
                          y='883.000'
                          class='abstract'>+ rowDeleted():boolean</text>
                    <text x='5.000'
                          y='894.000'
                          class='abstract'>+ updateNull(arg0:int):void</text>
                    <text x='5.000'
                          y='905.000'
                          class='abstract'>+ updateBoolean(arg0:int,arg1:boolean):void</text>
                    <text x='5.000'
                          y='916.000'
                          class='abstract'>+ updateByte(arg0:int,arg1:byte):void</text>
                    <text x='5.000'
                          y='927.000'
                          class='abstract'>+ updateShort(arg0:int,arg1:short):void</text>
                    <text x='5.000'
                          y='938.000'
                          class='abstract'>+ updateInt(arg0:int,arg1:int):void</text>
                    <text x='5.000'
                          y='949.000'
                          class='abstract'>+ updateLong(arg0:int,arg1:long):void</text>
                    <text x='5.000'
                          y='960.000'
                          class='abstract'>+ updateFloat(arg0:int,arg1:float):void</text>
                    <text x='5.000'
                          y='971.000'
                          class='abstract'>+ updateDouble(arg0:int,arg1:double):void</text>
                    <text x='5.000'
                          y='982.000'
                          class='abstract'>+ updateBigDecimal(arg0:int,arg1:java.math.BigDecimal):void</text>
                    <text x='5.000'
                          y='993.000'
                          class='abstract'>+ updateString(arg0:int,arg1:java.lang.String):void</text>
                    <text x='5.000'
                          y='1004.000'
                          class='abstract'>+ updateBytes(arg0:int,arg1:byte[]):void</text>
                    <text x='5.000'
                          y='1015.000'
                          class='abstract'>+ updateDate(arg0:int,arg1:java.sql.Date):void</text>
                    <text x='5.000'
                          y='1026.000'
                          class='abstract'>+ updateTime(arg0:int,arg1:java.sql.Time):void</text>
                    <text x='5.000'
                          y='1037.000'
                          class='abstract'>+ updateTimestamp(arg0:int,arg1:java.sql.Timestamp):void</text>
                    <text x='5.000'
                          y='1048.000'
                          class='abstract'>+ updateAsciiStream(arg0:int,arg1:java.io.InputStream,arg2:int):void</text>
                    <text x='5.000'
                          y='1059.000'
                          class='abstract'>+ updateBinaryStream(arg0:int,arg1:java.io.InputStream,arg2:int):void</text>
                    <text x='5.000'
                          y='1070.000'
                          class='abstract'>+ updateCharacterStream(arg0:int,arg1:java.io.Reader,arg2:int):void</text>
                    <text x='5.000'
                          y='1081.000'
                          class='abstract'>+ updateObject(arg0:int,arg1:java.lang.Object,arg2:int):void</text>
                    <text x='5.000'
                          y='1092.000'
                          class='abstract'>+ updateObject(arg0:int,arg1:java.lang.Object):void</text>
                    <text x='5.000'
                          y='1103.000'
                          class='abstract'>+ updateNull(arg0:java.lang.String):void</text>
                    <text x='5.000'
                          y='1114.000'
                          class='abstract'>+ updateBoolean(arg0:java.lang.String,arg1:boolean):void</text>
                    <text x='5.000'
                          y='1125.000'
                          class='abstract'>+ updateByte(arg0:java.lang.String,arg1:byte):void</text>
                    <text x='5.000'
                          y='1136.000'
                          class='abstract'>+ updateShort(arg0:java.lang.String,arg1:short):void</text>
                    <text x='5.000'
                          y='1147.000'
                          class='abstract'>+ updateInt(arg0:java.lang.String,arg1:int):void</text>
                    <text x='5.000'
                          y='1158.000'
                          class='abstract'>+ updateLong(arg0:java.lang.String,arg1:long):void</text>
                    <text x='5.000'
                          y='1169.000'
                          class='abstract'>+ updateFloat(arg0:java.lang.String,arg1:float):void</text>
                    <text x='5.000'
                          y='1180.000'
                          class='abstract'>+ updateDouble(arg0:java.lang.String,arg1:double):void</text>
                    <text x='5.000'
                          y='1191.000'
                          class='abstract'>+ updateBigDecimal(arg0:java.lang.String,arg1:java.math.BigDecimal):void</text>
                    <text x='5.000'
                          y='1202.000'
                          class='abstract'>+ updateString(arg0:java.lang.String,arg1:java.lang.String):void</text>
                    <text x='5.000'
                          y='1213.000'
                          class='abstract'>+ updateBytes(arg0:java.lang.String,arg1:byte[]):void</text>
                    <text x='5.000'
                          y='1224.000'
                          class='abstract'>+ updateDate(arg0:java.lang.String,arg1:java.sql.Date):void</text>
                    <text x='5.000'
                          y='1235.000'
                          class='abstract'>+ updateTime(arg0:java.lang.String,arg1:java.sql.Time):void</text>
                    <text x='5.000'
                          y='1246.000'
                          class='abstract'>+ updateTimestamp(arg0:java.lang.String,arg1:java.sql.Timestamp):void</text>
                    <text x='5.000'
                          y='1257.000'
                          class='abstract'>+ updateAsciiStream(arg0:java.lang.String,arg1:java.io.InputStream,arg2:int):void</text>
                    <text x='5.000'
                          y='1268.000'
                          class='abstract'>+ updateBinaryStream(arg0:java.lang.String,arg1:java.io.InputStream,arg2:int):void</text>
                    <text x='5.000'
                          y='1279.000'
                          class='abstract'>+ updateCharacterStream(arg0:java.lang.String,arg1:java.io.Reader,arg2:int):void</text>
                    <text x='5.000'
                          y='1290.000'
                          class='abstract'>+ updateObject(arg0:java.lang.String,arg1:java.lang.Object,arg2:int):void</text>
                    <text x='5.000'
                          y='1301.000'
                          class='abstract'>+ updateObject(arg0:java.lang.String,arg1:java.lang.Object):void</text>
                    <text x='5.000'
                          y='1312.000'
                          class='abstract'>+ insertRow():void</text>
                    <text x='5.000'
                          y='1323.000'
                          class='abstract'>+ updateRow():void</text>
                    <text x='5.000'
                          y='1334.000'
                          class='abstract'>+ deleteRow():void</text>
                    <text x='5.000'
                          y='1345.000'
                          class='abstract'>+ refreshRow():void</text>
                    <text x='5.000'
                          y='1356.000'
                          class='abstract'>+ cancelRowUpdates():void</text>
                    <text x='5.000'
                          y='1367.000'
                          class='abstract'>+ moveToInsertRow():void</text>
                    <text x='5.000'
                          y='1378.000'
                          class='abstract'>+ moveToCurrentRow():void</text>
                    <text x='5.000'
                          y='1389.000'
                          class='abstract'>+ getStatement():java.sql.Statement</text>
                    <text x='5.000'
                          y='1400.000'
                          class='abstract'>+ getObject(arg0:int,arg1:java.util.Map&lt;java.lang.String,java.lang.Class&lt;?&gt;&gt;):java.lang.Object</text>
                    <text x='5.000'
                          y='1411.000'
                          class='abstract'>+ getRef(arg0:int):java.sql.Ref</text>
                    <text x='5.000'
                          y='1422.000'
                          class='abstract'>+ getBlob(arg0:int):java.sql.Blob</text>
                    <text x='5.000'
                          y='1433.000'
                          class='abstract'>+ getClob(arg0:int):java.sql.Clob</text>
                    <text x='5.000'
                          y='1444.000'
                          class='abstract'>+ getArray(arg0:int):java.sql.Array</text>
                    <text x='5.000'
                          y='1455.000'
                          class='abstract'>+ getObject(arg0:java.lang.String,arg1:java.util.Map&lt;java.lang.String,java.lang.Class&lt;?&gt;&gt;):java.lang.Object</text>
                    <text x='5.000'
                          y='1466.000'
                          class='abstract'>+ getRef(arg0:java.lang.String):java.sql.Ref</text>
                    <text x='5.000'
                          y='1477.000'
                          class='abstract'>+ getBlob(arg0:java.lang.String):java.sql.Blob</text>
                    <text x='5.000'
                          y='1488.000'
                          class='abstract'>+ getClob(arg0:java.lang.String):java.sql.Clob</text>
                    <text x='5.000'
                          y='1499.000'
                          class='abstract'>+ getArray(arg0:java.lang.String):java.sql.Array</text>
                    <text x='5.000'
                          y='1510.000'
                          class='abstract'>+ getDate(arg0:int,arg1:java.util.Calendar):java.sql.Date</text>
                    <text x='5.000'
                          y='1521.000'
                          class='abstract'>+ getDate(arg0:java.lang.String,arg1:java.util.Calendar):java.sql.Date</text>
                    <text x='5.000'
                          y='1532.000'
                          class='abstract'>+ getTime(arg0:int,arg1:java.util.Calendar):java.sql.Time</text>
                    <text x='5.000'
                          y='1543.000'
                          class='abstract'>+ getTime(arg0:java.lang.String,arg1:java.util.Calendar):java.sql.Time</text>
                    <text x='5.000'
                          y='1554.000'
                          class='abstract'>+ getTimestamp(arg0:int,arg1:java.util.Calendar):java.sql.Timestamp</text>
                    <text x='5.000'
                          y='1565.000'
                          class='abstract'>+ getTimestamp(arg0:java.lang.String,arg1:java.util.Calendar):java.sql.Timestamp</text>
                    <text x='5.000'
                          y='1576.000'
                          class='abstract'>+ getURL(arg0:int):java.net.URL</text>
                    <text x='5.000'
                          y='1587.000'
                          class='abstract'>+ getURL(arg0:java.lang.String):java.net.URL</text>
                    <text x='5.000'
                          y='1598.000'
                          class='abstract'>+ updateRef(arg0:int,arg1:java.sql.Ref):void</text>
                    <text x='5.000'
                          y='1609.000'
                          class='abstract'>+ updateRef(arg0:java.lang.String,arg1:java.sql.Ref):void</text>
                    <text x='5.000'
                          y='1620.000'
                          class='abstract'>+ updateBlob(arg0:int,arg1:java.sql.Blob):void</text>
                    <text x='5.000'
                          y='1631.000'
                          class='abstract'>+ updateBlob(arg0:java.lang.String,arg1:java.sql.Blob):void</text>
                    <text x='5.000'
                          y='1642.000'
                          class='abstract'>+ updateClob(arg0:int,arg1:java.sql.Clob):void</text>
                    <text x='5.000'
                          y='1653.000'
                          class='abstract'>+ updateClob(arg0:java.lang.String,arg1:java.sql.Clob):void</text>
                    <text x='5.000'
                          y='1664.000'
                          class='abstract'>+ updateArray(arg0:int,arg1:java.sql.Array):void</text>
                    <text x='5.000'
                          y='1675.000'
                          class='abstract'>+ updateArray(arg0:java.lang.String,arg1:java.sql.Array):void</text>
                    <text x='5.000'
                          y='1686.000'
                          class='abstract'>+ getRowId(arg0:int):java.sql.RowId</text>
                    <text x='5.000'
                          y='1697.000'
                          class='abstract'>+ getRowId(arg0:java.lang.String):java.sql.RowId</text>
                    <text x='5.000'
                          y='1708.000'
                          class='abstract'>+ updateRowId(arg0:int,arg1:java.sql.RowId):void</text>
                    <text x='5.000'
                          y='1719.000'
                          class='abstract'>+ updateRowId(arg0:java.lang.String,arg1:java.sql.RowId):void</text>
                    <text x='5.000'
                          y='1730.000'
                          class='abstract'>+ getHoldability():int</text>
                    <text x='5.000'
                          y='1741.000'
                          class='abstract'>+ isClosed():boolean</text>
                    <text x='5.000'
                          y='1752.000'
                          class='abstract'>+ updateNString(arg0:int,arg1:java.lang.String):void</text>
                    <text x='5.000'
                          y='1763.000'
                          class='abstract'>+ updateNString(arg0:java.lang.String,arg1:java.lang.String):void</text>
                    <text x='5.000'
                          y='1774.000'
                          class='abstract'>+ updateNClob(arg0:int,arg1:java.sql.NClob):void</text>
                    <text x='5.000'
                          y='1785.000'
                          class='abstract'>+ updateNClob(arg0:java.lang.String,arg1:java.sql.NClob):void</text>
                    <text x='5.000'
                          y='1796.000'
                          class='abstract'>+ getNClob(arg0:int):java.sql.NClob</text>
                    <text x='5.000'
                          y='1807.000'
                          class='abstract'>+ getNClob(arg0:java.lang.String):java.sql.NClob</text>
                    <text x='5.000'
                          y='1818.000'
                          class='abstract'>+ getSQLXML(arg0:int):java.sql.SQLXML</text>
                    <text x='5.000'
                          y='1829.000'
                          class='abstract'>+ getSQLXML(arg0:java.lang.String):java.sql.SQLXML</text>
                    <text x='5.000'
                          y='1840.000'
                          class='abstract'>+ updateSQLXML(arg0:int,arg1:java.sql.SQLXML):void</text>
                    <text x='5.000'
                          y='1851.000'
                          class='abstract'>+ updateSQLXML(arg0:java.lang.String,arg1:java.sql.SQLXML):void</text>
                    <text x='5.000'
                          y='1862.000'
                          class='abstract'>+ getNString(arg0:int):java.lang.String</text>
                    <text x='5.000'
                          y='1873.000'
                          class='abstract'>+ getNString(arg0:java.lang.String):java.lang.String</text>
                    <text x='5.000'
                          y='1884.000'
                          class='abstract'>+ getNCharacterStream(arg0:int):java.io.Reader</text>
                    <text x='5.000'
                          y='1895.000'
                          class='abstract'>+ getNCharacterStream(arg0:java.lang.String):java.io.Reader</text>
                    <text x='5.000'
                          y='1906.000'
                          class='abstract'>+ updateNCharacterStream(arg0:int,arg1:java.io.Reader,arg2:long):void</text>
                    <text x='5.000'
                          y='1917.000'
                          class='abstract'>+ updateNCharacterStream(arg0:java.lang.String,arg1:java.io.Reader,arg2:long):void</text>
                    <text x='5.000'
                          y='1928.000'
                          class='abstract'>+ updateAsciiStream(arg0:int,arg1:java.io.InputStream,arg2:long):void</text>
                    <text x='5.000'
                          y='1939.000'
                          class='abstract'>+ updateBinaryStream(arg0:int,arg1:java.io.InputStream,arg2:long):void</text>
                    <text x='5.000'
                          y='1950.000'
                          class='abstract'>+ updateCharacterStream(arg0:int,arg1:java.io.Reader,arg2:long):void</text>
                    <text x='5.000'
                          y='1961.000'
                          class='abstract'>+ updateAsciiStream(arg0:java.lang.String,arg1:java.io.InputStream,arg2:long):void</text>
                    <text x='5.000'
                          y='1972.000'
                          class='abstract'>+ updateBinaryStream(arg0:java.lang.String,arg1:java.io.InputStream,arg2:long):void</text>
                    <text x='5.000'
                          y='1983.000'
                          class='abstract'>+ updateCharacterStream(arg0:java.lang.String,arg1:java.io.Reader,arg2:long):void</text>
                    <text x='5.000'
                          y='1994.000'
                          class='abstract'>+ updateBlob(arg0:int,arg1:java.io.InputStream,arg2:long):void</text>
                    <text x='5.000'
                          y='2005.000'
                          class='abstract'>+ updateBlob(arg0:java.lang.String,arg1:java.io.InputStream,arg2:long):void</text>
                    <text x='5.000'
                          y='2016.000'
                          class='abstract'>+ updateClob(arg0:int,arg1:java.io.Reader,arg2:long):void</text>
                    <text x='5.000'
                          y='2027.000'
                          class='abstract'>+ updateClob(arg0:java.lang.String,arg1:java.io.Reader,arg2:long):void</text>
                    <text x='5.000'
                          y='2038.000'
                          class='abstract'>+ updateNClob(arg0:int,arg1:java.io.Reader,arg2:long):void</text>
                    <text x='5.000'
                          y='2049.000'
                          class='abstract'>+ updateNClob(arg0:java.lang.String,arg1:java.io.Reader,arg2:long):void</text>
                    <text x='5.000'
                          y='2060.000'
                          class='abstract'>+ updateNCharacterStream(arg0:int,arg1:java.io.Reader):void</text>
                    <text x='5.000'
                          y='2071.000'
                          class='abstract'>+ updateNCharacterStream(arg0:java.lang.String,arg1:java.io.Reader):void</text>
                    <text x='5.000'
                          y='2082.000'
                          class='abstract'>+ updateAsciiStream(arg0:int,arg1:java.io.InputStream):void</text>
                    <text x='5.000'
                          y='2093.000'
                          class='abstract'>+ updateBinaryStream(arg0:int,arg1:java.io.InputStream):void</text>
                    <text x='5.000'
                          y='2104.000'
                          class='abstract'>+ updateCharacterStream(arg0:int,arg1:java.io.Reader):void</text>
                    <text x='5.000'
                          y='2115.000'
                          class='abstract'>+ updateAsciiStream(arg0:java.lang.String,arg1:java.io.InputStream):void</text>
                    <text x='5.000'
                          y='2126.000'
                          class='abstract'>+ updateBinaryStream(arg0:java.lang.String,arg1:java.io.InputStream):void</text>
                    <text x='5.000'
                          y='2137.000'
                          class='abstract'>+ updateCharacterStream(arg0:java.lang.String,arg1:java.io.Reader):void</text>
                    <text x='5.000'
                          y='2148.000'
                          class='abstract'>+ updateBlob(arg0:int,arg1:java.io.InputStream):void</text>
                    <text x='5.000'
                          y='2159.000'
                          class='abstract'>+ updateBlob(arg0:java.lang.String,arg1:java.io.InputStream):void</text>
                    <text x='5.000'
                          y='2170.000'
                          class='abstract'>+ updateClob(arg0:int,arg1:java.io.Reader):void</text>
                    <text x='5.000'
                          y='2181.000'
                          class='abstract'>+ updateClob(arg0:java.lang.String,arg1:java.io.Reader):void</text>
                    <text x='5.000'
                          y='2192.000'
                          class='abstract'>+ updateNClob(arg0:int,arg1:java.io.Reader):void</text>
                    <text x='5.000'
                          y='2203.000'
                          class='abstract'>+ updateNClob(arg0:java.lang.String,arg1:java.io.Reader):void</text>
                    <text x='5.000'
                          y='2214.000'
                          class='abstract'>+ getObject(arg0:int,arg1:java.lang.Class&lt;T&gt;):T</text>
                    <text x='5.000'
                          y='2225.000'
                          class='abstract'>+ getObject(arg0:java.lang.String,arg1:java.lang.Class&lt;T&gt;):T</text>
                    <text x='5.000'
                          y='2236.000'>&#x2A22; updateObject(arg0:int,arg1:java.lang.Object,arg2:java.sql.SQLType,arg3:int):void</text>
                    <text x='5.000'
                          y='2247.000'>&#x2A22; updateObject(arg0:java.lang.String,arg1:java.lang.Object,arg2:java.sql.SQLType,arg3:int):void</text>
                    <text x='5.000'
                          y='2258.000'>&#x2A22; updateObject(arg0:int,arg1:java.lang.Object,arg2:java.sql.SQLType):void</text>
                    <text x='5.000'
                          y='2269.000'>&#x2A22; updateObject(arg0:java.lang.String,arg1:java.lang.Object,arg2:java.sql.SQLType):void</text>
                </g>
            </g>
        </symbol>
        <clipPath id='ID000005'>
            <rect class='externalClass'
                  height='73.000'
                  width='292.000'
                  x='0.000'
                  y='0.000'/>
        </clipPath>
        <symbol id='java.sql.Wrapper'>
            <g>
                <g clip-path='url(#ID000005)'>
                    <rect x='0.000'
                          y='0.000'
                          width='292.000'
                          height='73.000'
                          class='externalClass'/>
                    <line x1='0.000'
                          y1='28.000'
                          x2='292.000'
                          y2='28.000'
                          class='separator'/>
                    <text x='119.600'
                          y='13.000'
                          class='stereotype'>&#xAB;Interface&#xBB;</text>
                    <text x='125.000'
                          y='24.000'
                          class='abstract'>Wrapper</text>
                    <line x1='0.000'
                          y1='45.000'
                          x2='292.000'
                          y2='45.000'
                          class='separator'/>
                    <text x='5.000'
                          y='41.000'/>
                    <text x='5.000'
                          y='58.000'
                          class='abstract'>+ unwrap(arg0:java.lang.Class&lt;T&gt;):T</text>
                    <text x='5.000'
                          y='69.000'
                          class='abstract'>+ isWrapperFor(arg0:java.lang.Class&lt;?&gt;):boolean</text>
                </g>
            </g>
        </symbol>
        <clipPath id='ID000006'>
            <rect class='externalClass'
                  height='62.000'
                  width='94.000'
                  x='0.000'
                  y='0.000'/>
        </clipPath>
        <symbol id='java.lang.AutoCloseable'>
            <g>
                <g clip-path='url(#ID000006)'>
                    <rect x='0.000'
                          y='0.000'
                          width='94.000'
                          height='62.000'
                          class='externalClass'/>
                    <line x1='0.000'
                          y1='28.000'
                          x2='94.000'
                          y2='28.000'
                          class='separator'/>
                    <text x='20.600'
                          y='13.000'
                          class='stereotype'>&#xAB;Interface&#xBB;</text>
                    <text x='8.000'
                          y='24.000'
                          class='abstract'>AutoCloseable</text>
                    <line x1='0.000'
                          y1='45.000'
                          x2='94.000'
                          y2='45.000'
                          class='separator'/>
                    <text x='5.000'
                          y='41.000'/>
                    <text x='5.000'
                          y='58.000'
                          class='abstract'>+ close():void</text>
                </g>
            </g>
        </symbol>
    </defs>
    <path class='inheritance'
          d='M390.000,4977.000 L390.000,4877.000'
          marker-end='url(#inheritance)'/>
    <path class='inheritance'
          d='M365.000,2670.000 c0.000,-2458.000,-218.000,0.000,-218.000,-2458.000 v-15'
          marker-end='url(#inheritance)'/>
    <path class='implementation'
          d='M415.000,2670.000 c0.000,-85.000,-25.000,0.000,-25.000,-85.000 v-15'
          marker-end='url(#implementation)'/>
    <path class='inheritance'
          d='M365.000,297.000 c0.000,-184.000,100.000,0.000,100.000,-184.000 v-15'
          marker-end='url(#inheritance)'/>
    <path class='inheritance'
          d='M415.000,297.000 c0.000,-195.000,293.000,0.000,293.000,-195.000 v-15'
          marker-end='url(#inheritance)'/>
    <use x='25.000'
         y='25.000'
         xlink:href='#java.lang.Object'/>
    <use x='319.000'
         y='25.000'
         xlink:href='#java.sql.Wrapper'/>
    <use x='661.000'
         y='25.000'
         xlink:href='#java.lang.AutoCloseable'/>
    <use x='64.000'
         y='297.000'
         xlink:href='#java.sql.ResultSet'/>
    <use x='34.000'
         y='2670.000'
         xlink:href='#org.tquadrat.foundation.sql.internal.ResultSetWrapper'/>
    <use x='322.000'
         y='4977.000'
         xlink:href='#org.tquadrat.foundation.sql.internal.ResultSetSpliterator.InternalResultSet'/>
</svg>